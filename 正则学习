正则表达式：

元字符： . ^ $ * + ? \ | { } [ ] ( ) 十四个

主要操作：pattern————模式串，string————被处理的字符串，repl————替换串
1、生成正则表达式对象：re.compile(pattern,flag=0)
                        r1 = re.compile("abc")
                    
2、检索：re.search(pattern,string,flag=0)
    在string中检索与pattern匹配的子串，找到就返回一个match类型的对象，否则返回None
    
3、匹配：re.match(pattern,string,flag=0)
    检查string是否存在一个与pattern匹配的前缀，找到就返回一个match类型的对象，否则返回None
    re.search(r1, "aaabcbcabcb") #将匹配成功
    re.match(r1, "aaabcbcabcb")  #返回None
    
4、分割：re.split(pattern,string,maxsplit=0,flags=0)
    以pattern作为分割串将string分段。参数maxsplit指明最大分割数，用0表示要求处理完整个string。函数返回分割得到字符串的表
    re.split('', "abc abb are not the same")
    得到：['abc', 'abb', 'are', 'not', 'the', 'same']
    re.split("","1 2  3   4")#分割出几个空串
    得到：['1', '2', '', '3', '', '', '4']
   
5、找出所有匹配串：re.findall(pattern,sttring,flags)
    返回一个表，表中元素按顺序给出string里面与pattern匹配的各个子串（从左到右，非重叠的）
    
字符组：
    1、字符组描述符[......]:区间形式[],特殊形式[^]取反
    2、圆点字符(.)：圆点是通配符，它能匹配任何字符
    
重复：
    1、重复描述符：re正则表达式的重复运算符是"*",模式α*要求匹配模式α能匹配字符串的0次或任意多次重复
        re.split('[ ,]*','1 2  3   4')得到：['1', '2', '3', '4', '5']
        re.split('a*', 'abbaaabbdbbabbababbabb')得到：['', 'bb', 'bbdbb', 'bb', 'b', 'bb', 'bb']
        在考虑重复匹配时，有一个问题需要注意，计算re.match('ab*', 'abbbbbbc')时，模式'ab*'既可以与a匹配，也可以与ab匹配，等等，那么它究竟与哪个串匹配？
        （a）贪婪匹配：模式与字符串里有可能匹配的最长子串匹配。对上面例子的采用贪婪匹配规则，模式ab*就该匹配abbbbbb。re规定"*"运算符做贪婪匹配
        （b）非贪婪匹配（吝啬匹配）：模式与有可能匹配的最短子串匹配。对所有重复模式描述符，python都提供了相应的吝啬匹配描述符
        还有一个与"*"略微不同的重复描述符"+",表示作用模式的1次或多次重复。
    2、可选描述符："?"是可选（片段）描述符表示，"α?"可以与空串或者与α匹配的字符串匹配，也就是说，他要求与α匹配的字符串0次或1次重复匹配。'-?\d+':表示整数的字符串，也可以与数字0的串匹配
    
    3、重复次数描述符：确定次数的重复用{n}描述，α{n}与α匹配的串的n次重复
        例、描述北京固定号码的模式串可以写'(010-)?[2-9][0-9]{7}'。他说明，这种串可能以010-开始，随后的数字是2到9，再后7个十进制数字
        实例中出现了圆括号，用于描述"?"的作用范围，这对圆括号不能省。显然*、？、{3}都有作用范围问题（优先级），re包规定它们都作用于最小表达式。例如：'010-?'表示-可选，而'(010-)'?表示整个段可选
        
    4、重复次数的范围描述符：重复次数的范围用{m,n}描述。例如，α{m,n}与α匹配的串的m到n次重复匹配，包括m次和n次
        a{3,7}与3到7个a构成的串匹配，go{2,5}gle与google、gooogle、goooole、gooooole匹配
        重复范围描述符中的m和n可以省略，α{,n}等价于α{0,n},而α{m,}等价于α{m,infinity}。易见，前面几种描述符都是可以用这种形式表示：
        α{n}等价于α{n,n},α?等价于α{0,1}
        α*等价于α{0,infinity},a+等价于α{1,infinity}
        
    *、+、？、{m,n}都采取贪婪匹配规则，与被匹配串中最长的合适子串匹配（因为它们可能出现在更大的模式里面，还需要照顾上下文的需要）
    5、非贪婪匹配描述符：与各种贪婪重复运算符对应，它们的形式为：*?、+?、??、{m,n}?（在上述各运算符后加一个?）,语义相对应，采用非贪婪匹配（最短匹配）策略
    
选择：
    选择描述符："|",a|b|c可以匹配a或b或c,"|"描述符的结合力最弱，比顺序组合的结合力还弱，一般不用括号
    
首尾描述符：
    几个描述符用于匹配一行或一个串的头尾
    1、行首描述符：以"^"符号开头的模式，只能与一行的前缀子串匹配
        re.search('^for', 'books for children')将得到None。但是，re.search('^for',books\nfor children)将匹配成功
    2、行尾描述符：以"$"符号结尾的模式只与一行的后缀子串匹配
        re.search('fish$', 'cats like to eat fishes')将得到None，但是re.search('like$', 'cats like\nto eat fishes')将匹配成功
    3、串首描述符：
        \A开头的模式只与整个被匹配串的前缀匹配
    4、串尾描述符
        \Z结束的模式只与整个被匹配串的后缀匹配
        
至此，14个元字符全部学习完毕。总结一下：其中三对括号，用于描述优先级结合、字符组和重复次数；圆点代表通配符；星号和加号表示重复；^和$表示行首和行尾；反斜线符号还是转义符
