栈与队列：
    栈(stack)与队列()主要用于计算过程中保存数据，栈与队列也是最简单的缓存结构，只支持数据项的存储和访问，不支持数据项之间的任何关系。
    栈是保证元素后进先出（后存入者先使用，Last In First Out，LIFO）关系结构，简称为LIFO结构
    队列是保证元素先进先出（先存入者先使用，First In First Out，FIFO）关系结构，简称FIFO结构
    在python中，可以用list实现栈的功能，python标准库中还提供了一种支持队列用途的结构deque。
    栈的抽象数据类型描述：
    ADT Stack：
        Stack(self) #创建空栈
        is_empty(self)  #判断栈是否为空，空时返回True否则返回False
        push(self,elem)  #将元素elem加入栈，也常称为压入或推入
        pop(self) #删除栈里最后压入夫人元素并将其返回，常称为弹出
        top(self) #取得栈里最后压入的元素，不删除
        
    栈的线性表实现：
        在一端进行插入和删除的线性表，执行端为栈顶，另一端为栈底
        对于顺序表，后端插入和删除为O(1)操作，应该用这一端作为栈顶
        对于链接表，前端插入和删除都是O(1)操作，应该用这一端作为栈顶
        
    栈的顺序表实现：
        实现栈结构之前，应先定义一个操作失败的异常处理类：
            class StackUnderflow(ValueError): #栈下溢（空栈访问）
                pass
        list直接作为栈使用，相关情况如下考虑（假定lst的值是一个表）：
            1、建立空栈对应于创建一个空表[]，判空栈对应于检查是否为空表
            2、由于list采用动态顺序表技术（分离式实现），作为栈的表不会满
            3、压入元素操作应在表的尾端进行，对应于lst.append(x)
            4、访问栈顶元素应该用lst[-1]
            5、弹出操作应在尾端进行，无参的lst.pop()默认弹出表尾元素
        把list作为栈使用，完全可以满足应用的需要。但是，这样建立的对象还是list，提供了list类型的所有操作，特别是提供了一些栈结构原本不
        应该支持的操作，威胁栈的安全性
        
        为了概念清晰，实现安全，操作名也更易理解，考虑基于顺序表定义一个栈类，使之成为独立的类型，把python的list隐藏在这个类中，作为实现的基础
        实现代码见：栈的顺序表实现.py
